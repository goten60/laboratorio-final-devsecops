name: Main Workflow

on:
  push:
    branches:
      - feature-jm
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  
  # SAST:
  #   runs-on: ubuntu-24.04
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'

  #     - name: Install dependencies
  #       run: npm install
      
  #     - name: Hola mundo
  #       run: echo "Hola mundo3"

  #     # scan SAST 2
  #     - name: SonarQube Scan
  #       uses: SonarSource/sonarqube-scan-action@v4.2.1
  #       with:
  #         projectBaseDir: .
  #         args: >
  #           -Dsonar.organization=goten60 
  #           -Dsonar.projectKey=goten60_laboratorio-final-devsecops
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
  #     # Check the Quality Gate status.
  #     - name: SonarQube Server Quality Gate check
  #       id: sonarqube-quality-gate-check
  #       uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
  # SCA:
  #   runs-on: ubuntu-24.04
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
      
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'

  #     - name: Install dependencies
  #       run: npm install 

  #     - name: Install functions dependencies
  #       run: cd functions && npm install
      
  #     - name: Dependency Check
  #       uses: dependency-check/Dependency-Check_Action@1.1.0
  #       env:
  #         JAVA_HOME: /opt/jdk
  #       id: Depcheck
  #       with:
  #         project: '${{ github.event.repository.name }}'
  #         path: '.'
  #         format: 'HTML'
  #         args: >
  #           --failOnCVSS 7
  #           --enableRetired

  #     - name: Upload Test Result
  #       uses: actions/upload-artifact@master
  #       with:
  #         name: Depcheck Report
  #         path: ${{github.workspace}}/reports
      
  # SCA_SNYK:
  #   name: SCA with Snyk 
  #   runs-on: ubuntu-24.04
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
      
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
      
  #     - name: Install dependencies
  #       run: npm install
      
  #     #opcional, envia resultado a snyk cloud
  #     - name: Run Snyk and send to monitor cloud
  #       uses: snyk/actions/node@master
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #       with:
  #         command: monitor
  #         args: --all-projects

  #     - name: Run Snyk to check for vulnerabilities
  #       uses: snyk/actions/node@master
  #       #continue-on-error: true # To make sure that SARIF upload gets called
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #       with:
  #         args: --sarif-file-output=snyk.sarif --json-file-output=snyk.json --all-projects

  #     # se genera reporte en html
  #     - name: install snyk-to-html
  #       run: |
  #         npm install snyk-to-html -g
  #         snyk-to-html -o reporte.html < snyk.json
          
  #     # envia resultado a GitHub Code Scanning
  #     - name: Upload result to GitHub Code Scanning
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: snyk.sarif
      
  #     # sube resultado como artefacto 
  #     - name: Upload Test Result
  #       uses: actions/upload-artifact@master
  #       with:
  #         name: Snyk Report
  #         path: reporte.html
  
  DockerBuild:
    name: Docker Build, login and push to registry.
    #needs: SCA
    runs-on: ubuntu-24.04
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Docker Login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Docker Build
      run: |
        docker build --tag goten60/cursodevsecops-lab:latest .

    - name: Push Docker
      run: |
        docker push goten60/cursodevsecops-lab:latest

  DockerScan:
    name: Image Scan with Trivy
    needs: DockerBuild
    runs-on: ubuntu-24.04
    steps:
    
    - name: Docker Login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Pull Docker
      run: |
        docker pull goten60/cursodevsecops-lab:latest

    - name: Run Trivy Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'goten60/cursodevsecops-lab:latest'
        format: 'table'

